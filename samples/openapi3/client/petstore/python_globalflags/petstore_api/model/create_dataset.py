# coding: utf-8

"""
    Synapse DB

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class CreateDataset(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dataset_size",
        }
        
        class properties:
            
            
            class dataset_size(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = -9223372036854775616
                    inclusive_minimum = 9223372036854775616
            upload_complete = schemas.BoolSchema
            
            
            class label(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
            
            
            class notes(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def project() -> typing.Type['SyndbApiNeurodataModelsProjectLeaf']:
                return SyndbApiNeurodataModelsProjectLeaf
        
            @staticmethod
            def animal() -> typing.Type['SyndbApiNeurodataModelsAnimalLeaf']:
                return SyndbApiNeurodataModelsAnimalLeaf
        
            @staticmethod
            def brain_structure() -> typing.Type['SyndbApiNeurodataModelsBrainStructureLeaf']:
                return SyndbApiNeurodataModelsBrainStructureLeaf
        
            @staticmethod
            def targeted_mutation() -> typing.Type['SyndbApiNeurodataModelsTargetedMutationLeaf']:
                return SyndbApiNeurodataModelsTargetedMutationLeaf
        
            @staticmethod
            def microscopy_method() -> typing.Type['SyndbApiNeurodataModelsMicroscopyMethodLeaf']:
                return SyndbApiNeurodataModelsMicroscopyMethodLeaf
            __annotations__ = {
                "dataset_size": dataset_size,
                "upload_complete": upload_complete,
                "label": label,
                "notes": notes,
                "project": project,
                "animal": animal,
                "brain_structure": brain_structure,
                "targeted_mutation": targeted_mutation,
                "microscopy_method": microscopy_method,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    dataset_size: MetaOapg.properties.dataset_size
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataset_size"]) -> MetaOapg.properties.dataset_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_complete"]) -> MetaOapg.properties.upload_complete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'SyndbApiNeurodataModelsProjectLeaf': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["animal"]) -> 'SyndbApiNeurodataModelsAnimalLeaf': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brain_structure"]) -> 'SyndbApiNeurodataModelsBrainStructureLeaf': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targeted_mutation"]) -> 'SyndbApiNeurodataModelsTargetedMutationLeaf': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["microscopy_method"]) -> 'SyndbApiNeurodataModelsMicroscopyMethodLeaf': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataset_size"], typing_extensions.Literal["upload_complete"], typing_extensions.Literal["label"], typing_extensions.Literal["notes"], typing_extensions.Literal["project"], typing_extensions.Literal["animal"], typing_extensions.Literal["brain_structure"], typing_extensions.Literal["targeted_mutation"], typing_extensions.Literal["microscopy_method"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataset_size"]) -> MetaOapg.properties.dataset_size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_complete"]) -> typing.Union[MetaOapg.properties.upload_complete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union['SyndbApiNeurodataModelsProjectLeaf', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["animal"]) -> typing.Union['SyndbApiNeurodataModelsAnimalLeaf', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brain_structure"]) -> typing.Union['SyndbApiNeurodataModelsBrainStructureLeaf', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targeted_mutation"]) -> typing.Union['SyndbApiNeurodataModelsTargetedMutationLeaf', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["microscopy_method"]) -> typing.Union['SyndbApiNeurodataModelsMicroscopyMethodLeaf', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataset_size"], typing_extensions.Literal["upload_complete"], typing_extensions.Literal["label"], typing_extensions.Literal["notes"], typing_extensions.Literal["project"], typing_extensions.Literal["animal"], typing_extensions.Literal["brain_structure"], typing_extensions.Literal["targeted_mutation"], typing_extensions.Literal["microscopy_method"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dataset_size: typing.Union[MetaOapg.properties.dataset_size, decimal.Decimal, int, ],
        upload_complete: typing.Union[MetaOapg.properties.upload_complete, bool, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, None, str, schemas.Unset] = schemas.unset,
        project: typing.Union['SyndbApiNeurodataModelsProjectLeaf', schemas.Unset] = schemas.unset,
        animal: typing.Union['SyndbApiNeurodataModelsAnimalLeaf', schemas.Unset] = schemas.unset,
        brain_structure: typing.Union['SyndbApiNeurodataModelsBrainStructureLeaf', schemas.Unset] = schemas.unset,
        targeted_mutation: typing.Union['SyndbApiNeurodataModelsTargetedMutationLeaf', schemas.Unset] = schemas.unset,
        microscopy_method: typing.Union['SyndbApiNeurodataModelsMicroscopyMethodLeaf', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CreateDataset':
        return super().__new__(
            cls,
            *args,
            dataset_size=dataset_size,
            upload_complete=upload_complete,
            label=label,
            notes=notes,
            project=project,
            animal=animal,
            brain_structure=brain_structure,
            targeted_mutation=targeted_mutation,
            microscopy_method=microscopy_method,
            _configuration=_configuration,
        )

from petstore_api.model.syndb_api_neurodata_models_animal_leaf import SyndbApiNeurodataModelsAnimalLeaf
from petstore_api.model.syndb_api_neurodata_models_brain_structure_leaf import SyndbApiNeurodataModelsBrainStructureLeaf
from petstore_api.model.syndb_api_neurodata_models_microscopy_method_leaf import SyndbApiNeurodataModelsMicroscopyMethodLeaf
from petstore_api.model.syndb_api_neurodata_models_project_leaf import SyndbApiNeurodataModelsProjectLeaf
from petstore_api.model.syndb_api_neurodata_models_targeted_mutation_leaf import SyndbApiNeurodataModelsTargetedMutationLeaf
