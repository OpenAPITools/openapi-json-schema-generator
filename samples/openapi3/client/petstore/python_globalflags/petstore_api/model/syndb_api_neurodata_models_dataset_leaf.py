# coding: utf-8

"""
    Synapse DB

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class SyndbApiNeurodataModelsDatasetLeaf(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "brain_structure_name",
            "microscopy_method_name",
            "animal_species",
            "targeted_mutation_names",
            "dataset_size",
        }
        
        class properties:
            
            
            class dataset_size(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = -9223372036854775616
                    inclusive_minimum = 9223372036854775616
            animal_species = schemas.StrSchema
            
            
            class targeted_mutation_names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targeted_mutation_names':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            microscopy_method_name = schemas.StrSchema
            brain_structure_name = schemas.StrSchema
            id = schemas.UUIDSchema
            upload_complete = schemas.BoolSchema
            
            
            class label(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
            
            
            class notes(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "dataset_size": dataset_size,
                "animal_species": animal_species,
                "targeted_mutation_names": targeted_mutation_names,
                "microscopy_method_name": microscopy_method_name,
                "brain_structure_name": brain_structure_name,
                "id": id,
                "upload_complete": upload_complete,
                "label": label,
                "notes": notes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    brain_structure_name: MetaOapg.properties.brain_structure_name
    microscopy_method_name: MetaOapg.properties.microscopy_method_name
    animal_species: MetaOapg.properties.animal_species
    targeted_mutation_names: MetaOapg.properties.targeted_mutation_names
    dataset_size: MetaOapg.properties.dataset_size
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brain_structure_name"]) -> MetaOapg.properties.brain_structure_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["microscopy_method_name"]) -> MetaOapg.properties.microscopy_method_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["animal_species"]) -> MetaOapg.properties.animal_species: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targeted_mutation_names"]) -> MetaOapg.properties.targeted_mutation_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataset_size"]) -> MetaOapg.properties.dataset_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_complete"]) -> MetaOapg.properties.upload_complete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["brain_structure_name"], typing_extensions.Literal["microscopy_method_name"], typing_extensions.Literal["animal_species"], typing_extensions.Literal["targeted_mutation_names"], typing_extensions.Literal["dataset_size"], typing_extensions.Literal["id"], typing_extensions.Literal["upload_complete"], typing_extensions.Literal["label"], typing_extensions.Literal["notes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brain_structure_name"]) -> MetaOapg.properties.brain_structure_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["microscopy_method_name"]) -> MetaOapg.properties.microscopy_method_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["animal_species"]) -> MetaOapg.properties.animal_species: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targeted_mutation_names"]) -> MetaOapg.properties.targeted_mutation_names: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataset_size"]) -> MetaOapg.properties.dataset_size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_complete"]) -> typing.Union[MetaOapg.properties.upload_complete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["brain_structure_name"], typing_extensions.Literal["microscopy_method_name"], typing_extensions.Literal["animal_species"], typing_extensions.Literal["targeted_mutation_names"], typing_extensions.Literal["dataset_size"], typing_extensions.Literal["id"], typing_extensions.Literal["upload_complete"], typing_extensions.Literal["label"], typing_extensions.Literal["notes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        brain_structure_name: typing.Union[MetaOapg.properties.brain_structure_name, str, ],
        microscopy_method_name: typing.Union[MetaOapg.properties.microscopy_method_name, str, ],
        animal_species: typing.Union[MetaOapg.properties.animal_species, str, ],
        targeted_mutation_names: typing.Union[MetaOapg.properties.targeted_mutation_names, list, tuple, ],
        dataset_size: typing.Union[MetaOapg.properties.dataset_size, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        upload_complete: typing.Union[MetaOapg.properties.upload_complete, bool, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SyndbApiNeurodataModelsDatasetLeaf':
        return super().__new__(
            cls,
            *args,
            brain_structure_name=brain_structure_name,
            microscopy_method_name=microscopy_method_name,
            animal_species=animal_species,
            targeted_mutation_names=targeted_mutation_names,
            dataset_size=dataset_size,
            id=id,
            upload_complete=upload_complete,
            label=label,
            notes=notes,
            _configuration=_configuration,
        )
